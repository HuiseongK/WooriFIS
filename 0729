### index

/*
1. db의 빠른 검색을 위한 색인 기능의 index 학습
    - primary key에는 기본적으로 자동 index로 설정됨 
    
    - DB 자체적으로 빠른 검색 기능 부여
        이 빠른 검색 기능 - index
    - 어설프게 사용자 정의 index 설정시 오히려 검색 속도 다운
    - 데이터 셋의 15% 이상의 데이터들이 잦은 변경이 이뤄질 경우 index 설정 비추

2. 주의사항
    - index가 반영된 컬럼 데이터가 수시로 변경되는 데이터라면 index 적용은 오히려 부작용
    
3. 문법
    CREATE INDEX index_name
    ON table_name (column1, column2, ...);
*/

use fisa;
create index idx_empno on emp(empno);

-- 1. index용 검색 속도 확일을 위한 table 생성 
drop table if exists emp01;

-- 존재하는 table로 부터 복제시에는 제약조건은 미적용
create table emp01 as select * from emp;
desc emp01;

-- empno로 검색시에 빠른 검색이 가능하게 색인 기능 적용
create index idx_emp01_empno on emp01(empno);
desc emp01;

-- drop index
alter table emp01 drop index idx_emp01_empno;

-- 코드 참고: <이것이 MYSQL이다>, 한빛출판사, 9장
DROP DATABASE IF EXISTS sqldb;
CREATE DATABASE sqldb;

USE sqldb;
CREATE TABLE usertbl 
( userID  CHAR(8) NOT NULL PRIMARY KEY, 
  name    VARCHAR(10) NOT NULL, 
  birthYear   INT NOT NULL,  
  addr    CHAR(2) NOT NULL,
  mobile1   CHAR(3) NULL, 
  mobile2   CHAR(8) NULL, 
  height    SMALLINT NULL, 
  mDate    DATE NULL 
);

-- <실습 1> --

USE sqldb;
CREATE TABLE  tbl1
    (   a INT PRIMARY KEY,
        b INT,
        c INT
    );

SHOW INDEX FROM tbl1;
/* 
1. Table  테이블명 표기
2. Non_unique  인덱스가 중복된 값이 가능하면 1 중복값이 허용되지 않는 UNIQUE INDEX이면 0을 표시함
3. Key_name  인덱스의 이름을 표시하며 인덱스가 해당 테이블의 기본키라면 PRIMARY로 표시함.
4. Seq_in_index  멀티컬럼이 인덱스인 경우 해당 필드의 순서를 표시함.
5. Column_name  해당 필드의 이름을 표시함.
6. Collation  인덱스에서 해당 필드가 정렬되는 방법을 표시함.
7. Cardinality  인덱스에 저장된 유일한 값들의 수를 표시함.
                (해당 컬럼의 중복된 수치. 중복도가 낮으면 카디널리티가 높다고 표현하고, 중복도가 높으면 카디널리티가 낮다고 표현)
8. Sub_part  인덱스 접두어.
9. Packed  키가 압축되는packed 방법.
10. Null  해당 필드가 NULL을 저장할 수 있으면 YES, 아니면 NO.
11. Index_type  인덱스가 어떤 형태로 구성되어 있는지 나타내며 MySQL은 대부분 B-tree 자료구조를 사용.
12. Comment  해당 필드를 설명하는 것이 아닌 인덱스에 관한 기타 정보.
13. Index_comment  인덱스에 관한 모든 기타 정보를 표시함.
*/


### integrity.sql

/* DB 자체적으로 강제적인 제약 사항 설정

	
1. 제약조건 적용 방식
	1-1. table 생성시 적용
		- create table의 마지막 부분에 설정
			방법1 - 제약조건명 없이 설정
			방법2 - constraints 제약조건명 명시
            
            1. create table ~~ (
				컬럼 자료형 제약조건 
                );
                
			2. create table ~~ (
				컬럼명 자료형 
                ) 
                constraint 제약조건명 제약조건 (컬럼명);
			
			
		- 참고 : mysql의 pk에 설정한 사용자 정의 제약조건명은 data 사전 table에서 검색 불가

	1-2. alter 명령어로 제약조건 추가
	- 이미 존재하는 table의 제약조건 수정(추가, 삭제)명령어
		alter table 테이블명 add/modify 컬럼명 타입 제약조건;
		
	1-3. 제약조건 삭제(drop)
		- table삭제 
		alter table 테이블명 alter 컬럼명 drop 제약조건;


2. Data Dictionary란?
	- 제약 조건등의 정보 확인
	- MySQL Server의 개체에 관한 모든 정보 보유하는 table
		- 일반 사용자가 검색은 가능하나 insert/update/delete 불가
	- information_schema

3. 제약 조건 종류
	emp와 dept의 관계
		- dept 의 deptno가 원조 / emp 의 deptno는 참조
		- dept : 부모 table / emp : 자식 table(dept를 참조하는 구조)
		- dept의 deptno는 중복 불허(not null) - 기본키(pk, primary key)
		- emp의 deptno - 참조키(fk, foreign key, 외래키)
	
	
	2-1. PK[primary key] - 기본키, 중복불가, null불가, 데이터들 구분을 위한 핵심 데이터
		: not null + unique
	2-2. not null - 반드시 데이터 존재
	2-3. unique - 중복 불가, null 허용
	2-4. check - table 생성시 규정한 범위의 데이터만 저장 가능 
	2-5. default - insert시에 특별한 데이터 미저장시에도 자동 저장되는 기본 값
				- 자바 관점에는 멤버 변수 선언 후 객체 생성 직후 멤버 변수 기본값으로 초기화
	* 2-6. FK[foreign key] 
		- 외래키[참조키], 다른 table의 pk를 참조하는 데이터 
		- table간의 주종 관계가 형성
		- pk 보유 table이 부모, 참조하는 table이 자식

		
*/
show databases;

-- fk_emp_dept 
-- 참조하는 테이블(emp)에 해당 외래 키 값이 존재하면 삭제를 허용하지 않습니다.
-- 즉, dept 테이블에서 deptno 값이 삭제되려 할 때, emp 테이블에 동일한 deptno 값이 존재하면 삭제가 실패합니다.
-- 참조하는 테이블(emp)에 해당 외래 키 값이 존재하면 업데이트를 허용하지 않습니다.
-- 즉, dept 테이블에서 deptno 값이 변경되려 할 때, emp 테이블에 동일한 deptno 값이 존재하면 업데이트가 실패합니다.
use fisa;

ALTER TABLE emp 
ADD CONSTRAINT fk_emp_dept FOREIGN KEY ( deptno ) REFERENCES dept( deptno ) 
ON DELETE NO ACTION ON UPDATE NO ACTION; 

select * from emp;

-- 신짱구를 40번 부서로 넣은 후
INSERT INTO fisa.emp VALUES (1, '신짱구', '유치원생', 2, now(), 800, null, 40); 

-- dept table의 deptno를 50으로 변경
INSERT INTO fisa.emp VALUES (2, '신짱구', '유치원생', 2, now(), 800, null, 50);
update dept set deptno = 50 where deptno = 40;
select * from emp;

-- dept table에 deptno = 50을 추가 
select * from dept;
insert into dept values(50, 'MARKETING', 'SEOUL');

-- 50으로 변경해주시고, 삭제  

delete from emp where deptno = 50;
select * from emp;


-- CASCADE : 폭포
-- 참조하는 테이블(emp)에 해당 외래 키 값이 존재하면 삭제를 허용합니다.
-- 즉, dept 테이블에서 deptno 값이 삭제되려 할 때, emp 테이블에 동일한 deptno 값이 존재하면 삭제가 성공합니다.
-- 참조하는 테이블(emp)에 해당 외래 키 값이 존재하면 업데이트를 허용합니다.
-- 즉, dept 테이블에서 deptno 값이 변경되려 할 때, emp 테이블에 동일한 deptno 값이 존재하면 업데이트가 성공합니다.


-- 부서번호, 부서이름, 부서가 있는 지역 

USE fisa;

drop table IF EXISTs emp;
drop table IF EXISTs dept;
DROP TABLE IF EXISTS salgrade;

CREATE TABLE dept (
    deptno               int  NOT NULL ,
    dname                varchar(20),
    loc                  varchar(20),
    CONSTRAINT pk_dept PRIMARY KEY ( deptno )
 );
 
CREATE TABLE emp (
    empno                int  NOT NULL  AUTO_INCREMENT,
    ename                varchar(20),
    job                  varchar(20),
    mgr                  smallint ,
    hiredate             date,
    sal                  numeric(7,2),
    comm                 numeric(7,2),
    deptno               int,
    CONSTRAINT pk_emp PRIMARY KEY ( empno ) -- 중복되지 않고, 고유한 값을 가지고 있는 컬럼 '기본키' 
 );
 
CREATE TABLE salgrade
 ( 
	GRADE INT,
	LOSAL numeric(7,2),
	HISAL numeric(7,2) 
);

insert into dept values(10, 'ACCOUNTING', 'NEW YORK');
insert into dept values(20, 'RESEARCH', 'DALLAS');
insert into dept values(30, 'SALES', 'CHICAGO');
insert into dept values(40, 'OPERATIONS', 'BOSTON');

desc dept; -- dept 테이블의 명세표를 보는 방법
desc emp;
desc salgrade;

-- STR_TO_DATE() : 단순 문자열을 날짜 형식의 타입으로 변환 
insert into emp values( 7839, 'KING', 'PRESIDENT', null, STR_TO_DATE ('17-11-1981','%d-%m-%Y'), 5000, null, 10);
insert into emp values( 7698, 'BLAKE', 'MANAGER', 7839, STR_TO_DATE('1-5-1981','%d-%m-%Y'), 2850, null, 30);
insert into emp values( 7782, 'CLARK', 'MANAGER', 7839, STR_TO_DATE('9-6-1981','%d-%m-%Y'), 2450, null, 10);
insert into emp values( 7566, 'JONES', 'MANAGER', 7839, STR_TO_DATE('2-4-1981','%d-%m-%Y'), 2975, null, 20);
insert into emp values( 7788, 'SCOTT', 'ANALYST', 7566, DATE_ADD(STR_TO_DATE('13-7-1987','%d-%m-%Y'), INTERVAL -85 DAY)  , 3000, null, 20);
insert into emp values( 7902, 'FORD', 'ANALYST', 7566, STR_TO_DATE('3-12-1981','%d-%m-%Y'), 3000, null, 20);
insert into emp values( 7369, 'SMITH', 'CLERK', 7902, STR_TO_DATE('17-12-1980','%d-%m-%Y'), 800, null, 20);
insert into emp values( 7499, 'ALLEN', 'SALESMAN', 7698, STR_TO_DATE('20-2-1981','%d-%m-%Y'), 1600, 300, 30);
insert into emp values( 7521, 'WARD', 'SALESMAN', 7698, STR_TO_DATE('22-2-1981','%d-%m-%Y'), 1250, 500, 30);
insert into emp values( 7654, 'MARTIN', 'SALESMAN', 7698, STR_TO_DATE('28-09-1981','%d-%m-%Y'), 1250, 1400, 30);
insert into emp values( 7844, 'TURNER', 'SALESMAN', 7698, STR_TO_DATE('8-9-1981','%d-%m-%Y'), 1500, 0, 30);
insert into emp values( 7876, 'ADAMS', 'CLERK', 7788, DATE_ADD(STR_TO_DATE('13-7-1987', '%d-%m-%Y'),INTERVAL -51 DAY), 1100, null, 20);
insert into emp values( 7900, 'JAMES', 'CLERK', 7698, STR_TO_DATE('3-12-1981','%d-%m-%Y'), 950, null, 30);
insert into emp values( 7934, 'MILLER', 'CLERK', 7782, STR_TO_DATE('23-1-1982','%d-%m-%Y'), 1300, null, 10);


INSERT INTO SALGRADE VALUES (1,700,1200);
INSERT INTO SALGRADE VALUES (2,1201,1400);
INSERT INTO SALGRADE VALUES (3,1401,2000);
INSERT INTO SALGRADE VALUES (4,2001,3000);
INSERT INTO SALGRADE VALUES (5,3001,9999);

COMMIT;

SELECT * FROM DEPT;
SELECT * FROM EMP;
SELECT * FROM SALGRADE;

COMMIT;

-- 제약 조건을 cascade로 변경 

alter table emp add constraint fk_emp_dept foreign key (deptno) references dept (deptno)
on delete cascade on update cascade;

alter table emp drop constraint fk_emp_dept; -- 걸어둔 제약조건 삭제
delete from dept where deptno = 50;
select * from emp;
/*
