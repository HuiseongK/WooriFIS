### Docker

두 개의 서버를 활용하여 파일 원격 전송 보내는 서버를 1, 받는 서버를 2라고 칭함.

두개의 docker 컨테이너를 생성. 이 때 포트번호는 달라야 함. docker run -name ~~~ -p @@@ 
service ssh start 명령어를 실행하여 컨테이너 활성화 

1에 존재하는 파일을 2에 전송: 

scp -P 24 {파일명} {2의 루트 주소 및 IP 넘버}:{전송 시킬 2의 폴더 경로}


### Elasticsearch 

![image](https://github.com/user-attachments/assets/009ec9f6-aa31-4cdb-a938-2777236e2597)

![image](https://github.com/user-attachments/assets/fde6bcfe-aed6-403c-aa16-189d21a4a650)

# Welcome to the Dev Tools Console!
#
# You can use Console to explore the Elasticsearch API. See the Elasticsearch API reference to learn more:
# https://www.elastic.co/guide/en/elasticsearch/reference/current/rest-apis.html
#
# Here are a few examples to get you started.


# Create an index
PUT /my-index

GET /my-index/_search

# Add a document to my-index
POST /my-index/_doc
{
    "id": "park_rocky-mountain",
    "title": "Rocky Mountain",
    "description": "Bisected north to south by the Continental Divide, this portion of the Rockies has ecosystems varying from over 150 riparian lakes to montane and subalpine forests to treeless alpine tundra."
}

# ElasticSearch CRUD

# 삽입
PUT my_index/_doc/1
{
  "title": "hello, elasticsearch!",
  "content": "elasticsearch installed and check Quesy DSL"
}

# 조회
GET my_index/_doc/1


# 수정. 엘라스틱에는 PATCH가 없음. 대신 POST +_update 
POST my_index/_update/1
{
  "doc": 
    {
    "title" : "hello, 엘라스틱서치"
    }
  }

# 삭제
DELETE my_index/_doc/1


# 삽입 2 - document 번호가 필요하지 않은 경우. 수정할 일이 별로 없음. 로그 수집할 때
POST my_index/_doc/
{
  "title": "hello, elasticsearch!",
  "content": "elasticsearch installed and check Quesy DSL"
}

# 조회 2 - 특정 조건을 본문에 달아서 요청할 때 
POST my_index/_search
{
  "query": {
    "match": {
      "title": "hello"
    }
  } 
}

GET my_index/_search

# 수정 2. 대신 POST +_doc/문서번호 - 일부가 아니라 전체를 수정(갈아끼움) 
POST my_index/_doc/mz8FRZEBXpMqRqjivLHY
{
  "doc": 
    {
    "title" : "hello, 엘라스틱서치"
    }
  }

# 삭제 - 인덱스 전체를 삭제 
DELETE my_index 

GET my_index/_search

# Perform a search in my-index
GET /my-index/_search?q="rocky mountain"

# 새로 인덱스를 만들어서 my_index  "hello", "hello world", "hello world hello", "hello world world world"

POST my_index/_doc/7 
{
  "title" : "world world world 111",
  "content" : "abc 111"
}

# query string -> 간단한 검색을 search?q=필드:값  으로 검색
POST my_index/_search?q="hello"

GET my_index/_search?q=title:hello


# 2. elasticsearch의 자료형
GET my_index

#명시적 맵핑으로 자료형을 지정해 줍니다
PUT my_index2
{
  "mappings": {
    "properties": {
      "content" :{
        "type" : "text"
      },
      "title" :{
        "type" : "keyword"
      },
      "longField" : {
        "type": "long"
      }
    }
  }
}

GET my_index2/_mapping

POST my_index2/_doc/2 
{
  "title" : "world world world hello",
  "content" : "hello world",
  "longField" : 3.1111111
}

GET my_index2/_search

# 전문검색
POST my_index2/_search?q="hello"

# 특정필드 검색 
GET my_index2/_mapping

# title 필드는 keyword 자료형이라 완전 일치가 아니면 검색 안됨 
POST my_index2/_search?q=title:hello

POST my_index2/_search?q=title:"world world world hello"

# content 필드는 text 자료형이라 들어온 문자열을 스페이스, 품사 기준으로 끊어서 색인했기 때문에 검색됨
POST my_index2/_search?q=content:hello

# NoSQL - 자료형이나 자료구조를 유연하게 만들어서 되도록 데이터의 색인/조회를 수월하게 만들었다.
PUT array_test
	{
		"mappings": {
			"properties": {
				"longField": {
				"type": "long"
				},
				"keywordField": {
					"type": "keyword"
				}
			}
		}
}

GET array_test/_mapping

POST array_test/_doc/1
{
  "longField" : 123,
  "keywordField": ["this", "is", "it"]
}


POST array_test/_doc/2
{
  "longField" :  [1, 2, 3],
  "keywordField": "this is it"
}


POST array_test/_doc/3
{
  "longField" :  [1, "2", 3],
  "keywordField":  ["this is it", 1]
}

POST array_test/_search?q=longField:"2"

# 정해놓은 명시적 맵핑은 배열 등으로 여러개를 집어넣을 때는 동작하지 않습니다.
POST array_test/_doc/4
{
  "longField" :  "삼십삼",
  "keywordField":  ["this is it", 1]
}

# 검색을 할 때도 배열로 여러개를 넣어놓았다면 원소단위로 검색을 해야 결과가 리턴됨
POST array_test/_search?q=keywordField:"this is it"

POST woorifisa/_doc/
{
  "student": {  
    "name": "신짱구", 
    "age": 5
  }
}

POST woorifisa/_search?q=student.age:5


PUT woorifisa_nested_test
{
  "mappings": {
    "properties": {
      "student": {
        "type": "nested",
        "properties": {
          "name": {
            "type": "keyword"
          },
          "age": {
            "type": "long"
          }
        }
      }
    }
  }
}

POST woorifisa_nested_test/_doc/
{
  "student": {  
    "name": "신짱구", 
    "age": 5
  }
}

POST woorifisa_nested_test/_search?q=student.age:5

GET woorifisa_nested_test/_search
{
  "query": {
    "nested": {
      "path": "student",
      "query": {
        "match": {
          "student.name": "신짱구"
        }
      }
    }
  }
}

PUT /time_example
{
  "mappings": {
    "properties": {
      "dateField": {
        "type": "date",
        "format": "epoch_millis||strict_date_time"
      }
    }
  }
}


POST /time_example/_doc/1
{
  "dateField": 1723446603
}

POST /time_example/_doc/2
{
  "dateField": "2021-06-01T00:00:00.000Z"
}

# 우리가 명시적 맵핑 해 놓은 형식이 아니므로 안 들어감. 
POST /time_example/_doc/2
{
  "dateField": "2021-06-02"
}

GET /time_example/_doc/2

POST /_sql?format=txt
{
  "query": "SELECT 1 + 1 AS result"
}

POST /_sql?format=json
{
  "query": "SELECT 1 + 1 AS result"
}

POST /_sql?format=json
{
  "query": "SELECT * FROM woorifisa WHERE student.name = '신짱구'"
}

# elasticsearch 의 검색조건 1) MATCH
# match_all이 생략된 상태
GET my_index/_search

# match_all이 생략된 상태
POST my_index/_search
{
  "query": {
    "match_all": {}
  }
}

POST my_index/_search
{
  "query": {
    "match": {
      "content": "hello"
      }
  }
}

POST my_index/_search
{
  "query": {
    "match": {
      # 한 칸 띄면 or의 역할을 하게 됩니다
      "content": "hello world"
      }
  }
}

# 입력한 순서대로 문맥을 탐색
POST my_index/_search
{
  "query": {
    "match_phrase": {
      "title": "hello world"
      }
  }
}

# 입력한 순서대로 문맥을 탐색
POST my_index/_search
{
  "query": {
    "match_phrase": {
      "title": "world hello"
      }
  }
}

# query_string 필드 / 검색할 문구 함께 지정
POST my_index/_search?q=title:hello
POST my_index/_search
{
  "query": {
    "query_string": {
      "default_field": "title", 
      "query": "hello"
      }
  }
}

GET my_index/_mapping

# 동적 매핑을 했기 때문에
# content라는 자료형을 완전일치 탐색하도록 keyword 타입으로 검색 가능
POST my_index/_search
{
  "query": {
    "match": {
      "content.keyword": "hello"
      }
  }
}

GET my_index2/_mapping

POST my_index2/_search
{
  "query": {
    "match": {
      "content.keyword": "hello"
      }
  }
}

