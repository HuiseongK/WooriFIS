# 값을 보고 싶으면 _search

GET my_index/_search 

# match: match_all, match, match_phrase
# quert_string -> 문자열 그대로를 찾는 방식

GET my_index/_search
{
  "query":{
    "match_all": {}
  }
}

GET my_index/_search
{
  "query":{
    "match":{
      "title": "hello"
    }
  }
}


# match_phrase - 순서대로 우리가 찾는 단어들이 문장에 들어 있는지.
GET my_index/_search
{
  "query":{
    "match_phrase":{
      "title": "world hello"
    }
  }
}

# slop라는 파라미터로 검색하려는 두 단어의 순서는 유지하되, 중간에 몇개의 토큰을 봐줄지 결정함. 
# query에 hello hello, slop에 2를 넣으면 hello hello 사이에 단어 2개까지 들어오는 건 인정한다는 것임.

GET my_index/_search
{
  "query":{
    "match_phrase":{
      "title": {
        "query": "hello hello",
        "slop": 2
      }
    }
  }
}

#query string: 위 4개 기능을 다 만들어주는 기능.

GET my_index/_search
{
  "query":{
    "query_string":{
      "fields": ["title", "content"],
        "query": "hello and world"
    }
  }
}

# bool query
# 1. must: 꼭 포함 
# 2. must_not: 절대 불포함 
# 3. should: 해당 조건이 나오면 검색 결과에 가산점 부여 
# 4. filter: 조건을 포함하되 점수에는 영향을 미치지 않는 것. -> 속도 빠름

# _bulk 라는 명령어를 사용하면 데이터를 한꺼번에 집어넣을 수 있습니다
# 텍스트 데이터는 \n로 해당 데이터(튜플)의 끝을 구분합니다 
POST _bulk/
{"index": {"_index" : "test", "_id":"1"}}
{"account_number":1,"balance":39225,"firstname":"Amber","lastname":"Duke","age":32,"gender":"M","address":"880 Holmes Lane","employer":"Pyrami","email":"amberduke@pyrami.com","city":"Brogan","state":"IL"}
{"index":{"_index" : "test", "_id":"6"}}
{"account_number":6,"balance":5686,"firstname":"Hattie","lastname":"Bond","age":36,"gender":"M","address":"671 Bristol Street","employer":"Netagy","email":"hattiebond@netagy.com","city":"Dante","state":"TN"}
{"index":{"_index" : "test", "_id":"13"}}
{"account_number":13,"balance":32838,"firstname":"Nanette","lastname":"Bates","age":28,"gender":"F","address":"789 Madison Street","employer":"Quility","email":"nanettebates@quility.com","city":"Nogal","state":"VA"}
{"index":{"_index" : "test", "_id":"18"}}
{"account_number":18,"balance":4180,"firstname":"Dale","lastname":"Adams","age":33,"gender":"M","address":"467 Hutchinson Court","employer":"Boink","email":"daleadams@boink.com","city":"Orick","state":"MD"}
{"index":{"_index" : "test", "_id":"20"}}
{"account_number":20,"balance":16418,"firstname":"Elinor","lastname":"Ratliff","age":36,"gender":"M","address":"282 Kings Place","employer":"Scentric","email":"elinorratliff@scentric.com","city":"Ribera","state":"WA"}
{"index":{"_index" : "test", "_id":"25"}}
{"account_number":25,"balance":40540,"firstname":"Virginia","lastname":"Ayala","age":39,"gender":"F","address":"171 Putnam Avenue","employer":"Filodyne","email":"virginiaayala@filodyne.com","city":"Nicholson","state":"PA"}
{"index":{"_index" : "test", "_id":"32"}}
{"account_number":32,"balance":48086,"firstname":"Dillard","lastname":"Mcpherson","age":34,"gender":"F","address":"702 Quentin Street","employer":"Quailcom","email":"dillardmcpherson@quailcom.com","city":"Veguita","state":"IN"}


# index 필드에 index 번호만 있고 index 이름이 없기 때문에 my_bulk라고 인덱스명을 설정한 상태에서 _bulk를 실행 
POST my_bulk/_bulk
{"index":{"_id":1}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를"}
{"index":{"_id":2}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를, 잎새에 이는 바람에도 나는 괴로워했다"}
{"index":{"_id":3}}
{"message":"죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를,\n 잎새에 이는 바람에도 너는 괴로워했다"}
{"index":{"_id":4}}
{"message":"chrome google Chrome Google"}
{"index":{"_id":5}}
{"message":"하늘사 Google Chrome"}
{"index":{"_id":6}}
{"message":"pink"}
{"index":{"_id":7}}
{"message":"pinkRed"}
{"index":{"_id":8}}
{"message":"pink red blue"}
{"index":{"_id":9}}
{"message":"pink red blue black"}
{"index":{"_id":10}}
{"message":"pink red blue black green"}
{"index":{"_id":11}}
{"message":"pink blue red black green"}
{"index":{"_id":12}}
{"message":"pink pink"}

GET my_bulk/_search


# 메세지에 '죽는'이 들어가는 항목만 출력
GET my_bulk/_search
{
  "query": {
    "query_string": {
      "fields": ["message"],
      "query": "죽는"
    }
  }
}

GET my_bulk/_search
{
  "query": {
    "match": {
      "message":"blue" 
    }
  }
}

#age가 34이고, GENDER이 M 사람
# Ignore search: 색인을 할 때 무조건 소문자로 됨 

POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"match": {
          "age": 34
          }
        },
        {"match":{
          "gender": "M"
        }}
      ]
    }
  }
}

# age가 34이면서 firstname이 dillard인 사람

POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"match": {
          "age": 34
          }
        },
        {"match":{
          "firstname": "dillard"
        }}
      ]
    }
  }
}

# 범위 gte, lte, gt, lt 
# eq/ne는 must/must_not으로 대체 가능하므로 사용 X


# 30000원 이상인 사람만 출력 

POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "balance": {
            "gte":30000}
          }
        }
      ]
    }
  }
}

# 30000원 이하인 사람만 출력 

POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "balance": {
            "lte":30000}
          }
        }
      ]
    }
  }
}

# 16418원 초과하는 사람만 출력 

POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "balance": {
            "gt":16418}
          }
        }
      ]
    }
  }
}

# balance가 30000보다 많으면서 Dillard가 아닌 사람 

POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "balance": {
            "gt":30000}
          }
        }
      ],
      "must_not": [
        {"match": {
          "firstname": "Dillard"
        }}
      ]
    }
  }
}


# should - 해당 조건에 맞으면 가산점 부여 
# should 조건과 일치하지 않는다고 해서 걸어지지는 않음. 
# 다만 우선 순위가 밀려서 조건에 맞는 데이터보다 나중에 보여짐.


# balance가 30000원 보다 많은 사람에게는 가산점 부여


POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "balance": {
            "gt":30000}
          }
        }
      ],
      "should": [
        {"match": {
          "state": "PA"
        }}
      ]
    }
  }
}


# filter : 조건을 만족하지 않으면 걸러짐. 
# 점수를 매기는 과정이 없어서 데이터 출력 속도가 빠름.

# balance가 30000보다 높으면서 나이가 27살이 아닌경우 

POST test/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "balance": {
            "gt":30000}
          }
        }
      ],
      "should": [
        {"match": {
          "age": 27
        }}
      ]
    }
  }
}


# sql의 * 은 0개 이상의 여러 문장, ?는 한 문자 

GET test/_search
{
  "query":{
    "query_string": {
    "default_field": "state",
    "query": "?A"
    }
  }
}

# D로 firstname이 시작하는 사람

GET test/_search
{
  "query": {
    "query_string": {
      "default_field": "firstname",
      "query": "D*"
    }
  }
}

# D로 firstname이 시작하는 4글자의 사람

GET test/_search
{
  "query": {
    "query_string": {
      "default_field": "firstname",
      "query": "D???"
    }
  }
}

# firstname 또는 lastname이 d로 시작하는 사람

GET test/_search
{
  "query": {
    "query_string": {
      "fields": ["firstname", "lastname"],
      "query": "D*"
    }
  }
}

# google 이라는 단어가 들어간 모든 문서를 검색하라. 

GET my_bulk/_search
{
  "query": {
    "query_string": {
      "default_field": "message",
      "query": "google"
    }
  }
}


# --------------------------------------------------------------------------

POST _analyze
{
  "analyzer": "standard",
  "text": "Hello, HELLO, World!"
}

POST _analyze
{
  "analyzer": "fingerprint",
  "text": "Hello, HELLO, what a wonderful World!"
}


POST _analyze
{
  "analyzer": "fingerprint",
  "text": "Yes yes, Gödel said this sentence is consistent and."
}

POST _analyze
{
  "analyzer": "standard",
  "text": "<p>I&apos;m so <b>happy</b>!</p>"
}

# html strip 캐릭터필드 적용
POST _analyze
{
  "char_filter": ["html_strip"],
  "text": "<p>I&apos;m so <b>happy</b>!</p>"
}

# 전체를 통으로 색인
POST _analyze
{
  "tokenizer": "keyword", 
  "text": "Hello, HELLO, World!"
}


## 토크나이저
POST _analyze
{
  "tokenizer": {
    "type" : "ngram"
  },
  "text" : "Hello, World!"
}


POST _analyze
{
  "tokenizer": {
    "type" : "ngram",
    "min_gram" : 3,
    "max_gram" : 4
  },
  "text" : "Hello, World!"
}


POST _analyze
{
  "tokenizer": {
    "type" : "edge_ngram",
    "min_gram" : 3,
    "max_gram" : 4
  },
  "text" : "Hello, World!"
}


POST _analyze
{
  "tokenizer": {
    "type" : "edge_ngram",
    "min_gram" : 3,
    "max_gram" : 4,
    "token_chars" : ["letter"]
  },
  "text" : "Hello, World!"
}


POST _analyze
{
  "filter": ["lowercase"],
  "text" : "Hello, World!"
}


POST _analyze
{
  "char_filter":["html_strip"],
  "tokenizer": {
    "type" : "edge_ngram",
    "min_gram" : 2,
    "max_gram" : 4,
    "token_chars" : ["letter"]
  },
  "filter": ["lowercase", "snowball"],
  "text" : "<p>I&apos;m so <b>happy</b>!</p>"
}


# https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-tokenfilter.html
# https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-tokenfilter.html

DELETE my_synonym_index
# 1. 인덱스 생성 및 분석기 설정
# 엘라스틱서치에서는 문서를 인덱싱할 때 사용하는 분석기와 검색할 때 사용하는 분석기가 동일해야 적절히 매칭됩니다.
PUT /my_synonym_index
{
  "settings": {
    "analysis": {
      "filter": {
        "synonym_filter": {
          "type": "synonym",
          "synonyms_path": "analysis/synonym.txt"
        }
      },
      "analyzer": {
        "my_synonym_analyzer": {
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "synonym_filter"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "my_synonym_analyzer"
      }
    }
  }
}


# 2. _analyze API를 사용하여 동의어 처리 확인
POST /my_synonym_index/_analyze
{
  "analyzer": "my_synonym_analyzer",
  "text": "car"
}

# 3. 문서 인덱싱
POST /my_synonym_index/_doc/1
{
  "title": "I love my mac and ibm"
}

# 4. 동의어를 사용한 검색
GET /my_synonym_index/_search
{
  "query": {
    "match": {
      "title": "pc"
    }
  }
}

POST /my_synonym_index/_analyze
{
  "analyzer": "my_synonym_analyzer",
  "text": "pc"
}

get /_analyze
{
  "tokenizer" : "nori_tokenizer",
  "text": "아이고 두시 반 밥먹어서, 졸려요!"
}

POST _analyze
{
  "analyzer": "kuromoji",
  "text": "タイトル曲「JUICY」は強烈なビートにオリエンタルなサウンドとギターが調和した、ハイブリッドトラップの曲で、遊び心いっぱいの歌詞が印象的な歌だ。"
}

POST _analyze
{
  "analyzer": "smartcn",
  "text": "第23届冬季奥运会将于2018年2月9日-25日在韩国江原道平昌展开。"
}

POST _analyze
{
  "tokenizer": "nori_tokenizer",
  "text": "第23届冬季奥运会将于2018年2月9日-25日在韩国江原道平昌展开。"
}


POST _analyze
{
  "tokenizer": "nori_tokenizer",
  "text": "뒷동산에 $감나무 @심기"
}

DELETE my_nori

PUT my_nori
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_nori_analyzer" : {
          "tokenizer": "my_nori_tokenizer"
        }
      }, 
      "tokenizer": {
        "my_nori_tokenizer": {
          "type": "nori_tokenizer",
          "decompound_mode": "none",
          "user_dictionary_rules" : ["감나무", "호두사과나무"]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "my_nori_analyzer"
      }
    }
  }
}


POST my_nori/_analyze
{
  "tokenizer": "my_nori_tokenizer",
  "text": "뒷동산에 $감나무 @심기"
}

POST my_nori/_analyze
{
  "tokenizer": "my_nori_tokenizer",
  "text": "뒷동산에 $호두나무 @심기"
}

PUT normalizer_test
{
  "settings": {
    "analysis": {
      "normalizer": {
        "my_normalizer": {
          "type": "custom",
          "char_filter": [],
          "filter": [
            "asciifolding",
            "uppercase"
          ]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "myNormalizerKeyword": {
        "type": "keyword",
        "normalizer": "my_normalizer"
      },
      "lowercaseKeyword": {
        "type": "keyword",
        "normalizer": "lowercase"
      },
      "defaultKeyword": {
        "type": "keyword"
      }
    }

  }
}

GET normalizer_test/_analyze
{
  "field": "myNormalizerKeyword",
  "text": "Håppy Wørld!!"
}

GET normalizer_test/_analyze
{
  "field": "lowercaseKeyword",
  "text": "Håppy Wørld!!"
}

GET normalizer_test/_analyze
{
  "field": "defaultKeyword",
  "text": "Håppy Wørld!!"
}


## 윤동주의 시 분석하기 
DELETE poem_analysis

PUT poem_index
{
  "settings": {
    "analysis": {
      "tokenizer": {
        "my_nori_tokenizer": {
          "type": "nori_tokenizer",
          "decompound_mode": "mixed",
          "user_dictionary_rules": ["윤동주"]
        }
      },
      "analyzer": {
        "my_nori_analyzer": {
          "type": "custom",
          "tokenizer": "my_nori_tokenizer",
          "filter": ["lowercase"]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "my_nori_analyzer"
      },
      "content": {
        "type": "text",
        "analyzer": "my_nori_analyzer"
      }
    }
  }
}



GET poem_index/_analyze
{
  "field": "my_nori_analyzer",
  "text": """ 별 헤는 밤

                         윤동주 /시인
 

계절이 지나가는 하늘에는
가을로 가득 차 있습니다.
 
 
나는 아무 걱정도 없이
가을 속의 별들을 다 헤일 듯합니다.
 
 
가슴속에 하나 둘 새겨지는 별을
이제 다 못 헤는 것은
쉬이 아침이 오는 까닭이요,
내일 밤이 남은 까닭이요,
아직 나의 청춘이 다하지 않은 까닭입니다.
 
 
별 하나에 추억과
별 하나에 사랑과
별 하나에 쓸쓸함과
별 하나에 憧憬과
별 하나에 詩와
별 하나에 어머니, 어머니
 
 
어머님, 나는 별 하나에 아름다운 말 한마디씩 불러봅니다.
소학교 때 책상을 같이 했던 아이들의 이름과 佩, 鏡,
玉 이런 異國少女들의 이름과, 벌써 아기 어머니
된 계집애들의 이름과, 가난한 이웃사람들의 이름과, 비둘기,
강아지, 토끼, 노새, 노루, 프랑시스 잼, 라이너 마리아 릴케,
이런 시인의 이름을 불러 봅니다.
 
 

이네들은 너무나 멀리 있습니다
별이 아스라이 멀듯이.
 
 
어머님,
그리고 당신은 멀리 北間島에 계십니다.
 
 
나는 무엇인지 그리워서
이 많은 별빛이 내린 언덕 위에
내 이름자를 써 보고,
흙으로 덮어 버리었습니다.
 
 
딴은 밤을 새워 우는 벌레는
부끄러운 이름을 슬퍼하는 까닭입니다.
 
 
그러나 겨울이 지나고 나의 별에도 봄이 오면,
무덤 위에 파란 잔디가 피어나듯이
내 이름자 묻힌 언덕 위에도
자랑처럼 풀이 무성할 게외다.
"""
}

  


