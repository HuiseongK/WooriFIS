GET kibana_sample_data_ecommerce/_search
{
  "query": {
    "match": {
      "curreny":"EUR"
    }
  },
  "aggs": {
    "EURO로 결제한 총 금액": { // 집계 결과를 어떤 이름으로 부를 것인지
      "sum": { 
        "field":"products.tax_amount" 
      }
    }
  }
}


GET kibana_sample_data_ecommerce/_search
{
  "query":{
    "match": {
      "geoip.continent_name": "Africa"
    }
  },
  "aggs": {
    "아프리카 내 EURO화 결제 금액": {
      "sum": {
        "field": "products.taxful_price"
      }
    }
  }
}

# cardinality - 지정한 필드가 가진 고유한 값의 개수를 계산해 반환한다.
# HyperLogLog++ 알고리즘 을 사용해 추정한 근사값이다.
# 1. 지정된 threshold 기준으로 각 document을 해싱한다. (규격화된 난수를 만듬
# 2.앞의 n자리 정도만 겹치는 값들을 '같은 값'이라고 어림짐작합니다. 

# 3. 그 결과를 돌려주게 된다.
# 확실한 cardinality를 보장받는 방법 -> 전체 document의 수만큼 threshold를 주기. 
# 대용량분산처리 프레임워크에서 고유값을 찾으실 때는 나온 값 그대로를 믿으면 안됨.


GET kibana_sample_data_ecommerce/_search
{
  "size":0,
  "query": {
    "term": {
      "currency": {
        "value": "EUR"
      }
    }
  },
  "aggs": {
    "my-cardinality-agg-nam": {
      "cardinality": {
        "field": "customer_id",
        "precision_threshold": 2
      }
    }
  }
}


GET kibana_sample_data_ecommerce/_search
{
  "size":0,
  "query": {
    "term": {
      "currency": {
        "value": "EUR"
      }
    }
  },
  "aggs": {
    "percentile result": {
      "percentile_ranks": {
        "field": "taxful_total_price",
          "values": [65]
      }
    }
  }
}


# 1. 원래 있었던 bank 인덱스를 삭제하고 아래 데이터를 넣어주세요.

DELETE bank

PUT _bulk
{"index":{"_index":"bank", "_id": "1"}}
{"date": "2018-06-01", "bank": "NH농협은행", "branch": "1호점", "location": "종각", "customers": 2314}
{"index":{"_index":"bank", "_id": "2"}}
{"date": "2017-06-01", "bank": "NH농협은행", "branch": "1호점", "location": "강남", "customers": 5412}
{"index":{"_index":"bank", "_id": "3"}}
{"date": "2017-07-10", "bank": "국민은행", "branch": "1호점", "location": "강남", "customers": 2543}
{"index":{"_index":"bank", "_id": "4"}}
{"date": "2018-07-15", "bank": "NH농협은행", "branch": "2호점", "location": "강남", "customers": 4456}
{"index":{"_index":"bank", "_id": "5"}}
{"date": "2019-08-07", "bank": "NH농협은행", "branch": "3호점", "location": "강남", "customers": 1562}
{"index":{"_index":"bank", "_id": "6"}}
{"date": "2020-08-18", "bank": "NH농협은행", "branch": "4호점", "location": "강남", "customers": 5724}
{"index":{"_index":"bank", "_id": "7"}}
{"date": "2020-09-02", "bank": "국민은행", "branch": "1호점", "location": "신촌", "customers": 1002}
{"index":{"_index":"bank", "_id": "8"}}
{"date": "2020-09-11", "bank": "국민은행", "branch": "1호점", "location": "양재", "customers": 4121}
{"index":{"_index":"bank", "_id": "9"}}
{"date": "2020-09-20", "bank": "NH농협은행", "branch": "3호점", "location": "홍제", "customers": 1021}
{"index":{"_index":"bank", "_id": "10"}}
{"date": "2020-10-01", "bank": "국민은행", "branch": "1호점", "location": "불광", "customers": 971}
{"index":{"_index":"bank", "_id": "11"}}
{"date": "2019-06-01", "bank": "NH농협은행", "branch": "2호점", "location": "종각", "customers": 875}
{"index":{"_index":"bank", "_id": "12"}}
{"date": "2018-06-01", "bank": "국민은행", "branch": "2호점", "location": "강남", "customers": 1506}
{"index":{"_index":"bank", "_id": "13"}}
{"date": "2020-09-02", "bank": "국민은행", "branch": "2호점", "location": "신촌", "customers": 3912}
{"index":{"_index":"bank", "_id": "14"}}
{"date": "2020-09-11", "bank": "국민은행", "branch": "2호점", "location": "양재", "customers": 784}
{"index":{"_index":"bank", "_id": "15"}}
{"date": "2020-10-01", "bank": "국민은행", "branch": "2호점", "location": "불광", "customers": 4513}
{"index":{"_index":"bank", "_id": "16"}}
{"date": "2020-10-01", "bank": "국민은행", "branch": "3호점", "location": "불광", "customers": 235}
{"index":{"_index":"bank", "_id": "17"}}
{"date": "2016-07-01", "bank": "기업은행", "branch": "1호점", "location": "불광", "customers": 971}
{"index":{"_index":"bank", "_id": "18"}}
{"date": "2017-10-01", "bank": "기업은행", "branch": "2호점", "location": "불광", "customers": 100}
{"index":{"_index":"bank", "_id": "19"}}
{"date": "2018-11-01", "bank": "기업은행", "branch": "3호점", "location": "불광", "customers": 151}
{"index":{"_index":"bank", "_id": "20"}}
{"date": "2020-10-01", "bank": "기업은행", "branch": "4호점", "location": "불광", "customers": 1302}


GET bank/_search

# 1) bank의 모든 고객수는 몇 명인가요?

GET bank/_search
{
  "size":0,
  "query": {
    "match_all": {}
  },
  "aggs": {
    "고객 합": {
      "sum": {
        "field": "customers"
      }
    }
  }
}



# 2) bank들 중에서 최소 고객을 보유한 은행의 고객 수는  몇 명인가요?  은행은어디인지도 같이 적어주세요.

GET bank/_search
{
  "query": {
    "match": {
      "customers": 100
    }
  }
}


GET bank/_search
{
  "size": 1,
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "customers": "asc"
    }
  ],
  "_source": ["bank", "branch", "customers"]
}



# 3) 불광지역에 있는 모든 은행들을 검색해보세요.

GET bank/_search
{
  "query": {
    "match": {
      "location": "불광"
    }
  }
}

# 4) 불광지역에 있는 모든 은행 고객수를 합하면 몇 명인가요?

GET bank/_search
{
  "size": 0, 
  "query": {
    "match": {
      "location": "불광"
    }
  },
  "aggs": {
    "불광지역 고객 수": {
      "sum": {
        "field": "customers"
      }
    }
  }
}


# 집계 -> 해당 결과를 바탕으로 검색

# 1. 전체 은행 중에 방문고객이 상위 25% 이상인 은행들은 어디일까요? 

GET bank/_search 
{
  "size": 0, 
  "query": {
    "match_all": {}
  },
  "aggs": {
    "상위 25% 은행": {
      "percentiles": {
        "field": "customers",
        "percents": [75]
      }
    }
  }
}

GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "customers": {
            "gte": 3964.25
          }
        }}
      ]
    }
  }
}

# 힌트: 범위(range)는 bool 쿼리 - must/must_not/should/filter 등의 API로 값을 검색

# 2. 연 5000명 이상 방문하는 은행은 전체 점포 중 몇퍼센트 정도의 위치를 점하고 있을까요?

GET bank/_search
{
  "size": 0,
  "aggs": {
    "연 5000명 이상 방문하는 은행": {
      "percentile_ranks": {
        "field": "customers",
        "values": [5000]
      }
    }
  }
}

# 2-1. 5000명 이상 방문하는 은행이 어느어느 은행인지도 찾아주세요. 

GET bank/_search
{
  "query": {
    "bool": {
      "must": [
        {"range": {
          "customers": {
            "gte": 5000
          }
        }}
      ]
    }
  }
}


# 불광지역에 있는 가장 고객이 적은 은행 고객수, 가장 고객이 많은 은행 고객수를 같이 확인

GET bank/_search
{
  "size": 0, 
  "query": {
    "match": {
      "location": "불광"
    }
  },
  "aggs": {
    "가장 많은 고객수": {
      "max": {
        "field": "customers"
      }
    },
    "가장 적은 고객수" : {
      "min":{
        "field": "customers"
      }
    }
  }
}


# 버킷 집계 
from: <= (이상 = 개구간)
to: < (미만 = 폐구간) 
